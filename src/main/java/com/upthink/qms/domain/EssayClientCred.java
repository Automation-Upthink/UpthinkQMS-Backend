package com.upthink.qms.domain;

import gson.GsonDTO;
import jakarta.persistence.*;
import java.sql.Timestamp;

@Entity
@Table(name="essay_client_credential")
public class EssayClientCred extends GsonDTO {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name="id")
    private int id;  // No need for 'final' since it's generated by the DB

    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "password", nullable = false)
    private String password;

    @Column(name = "created_by", nullable = false)
    private String createdBy;

    @Column(name = "essay_client_id", nullable = false)
    private int clientId;

    @Column(name = "download_limit", nullable = false)
    private int downloadLimit;

    @Column(name = "download_remaining", nullable = false)
    private int downloadRemaining;

    @Column(name = "created_at", nullable = false, updatable = false, insertable = false, columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    private Timestamp createdAt;

    // Default constructor for JPA
    public EssayClientCred() {
    }

    // Constructor without id and createdAt (because they are auto-generated)
    public EssayClientCred(String name,
                           String password,
                           String createdBy,
                           int clientId,
                           int downloadLimit,
                           int downloadRemaining) {
        this.name = name;
        this.password = password;
        this.createdBy = createdBy;
        this.clientId = clientId;
        this.downloadLimit = downloadLimit;
        this.downloadRemaining = downloadRemaining;
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getPassword() {
        return password;
    }

    public String getCreatedBy() {
        return createdBy;
    }

    public int getClientId() {
        return clientId;
    }

    public int getDownloadLimit() {
        return downloadLimit;
    }

    public int getDownloadRemaining() {
        return downloadRemaining;
    }

    public Timestamp getCreatedAt() {
        return createdAt;
    }
}
