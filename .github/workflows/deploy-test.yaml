name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

#      # 2. Set up Java environment
#      - name: Set up JDK 21
#        uses: actions/setup-java@v3
#        with:
#          java-version: '21'
#          distribution: 'adopt'  # or another distribution as needed

      # 3. Set up Gradle environment
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2.0.0
        with:
          gradle-version: '8.8.0'  # Specify your Gradle version

      # 4. Build the application with Gradle
      - name: Build with Gradle
        run: ./gradlew clean bootjar

      # 5. Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ap-south-1  # Replace with your AWS region
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 6. Build, tag, and push Docker image (Application)
      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: qms-springboot-backend-dev  # Replace with your ECR repository name for the app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile2 .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 7. Decode and set up SSH key
      - name: Decode SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # 8. Deploy to AWS EC2
      - name: Deploy to AWS EC2
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: qms-app-repo  # Replace with your ECR repository name for the app
          IMAGE_TAG: ${{ github.sha }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
            # Navigate to the directory where your Docker deployment scripts are located
            cd /path/to/your/deployment/directory || exit

            # Pull the latest base image (if necessary)
            docker pull 462203881643.dkr.ecr.ap-south-1.amazonaws.com/qms-base-image:latest

            # Pull the latest application image from ECR
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # Stop and remove the existing application container if it's running
            docker stop qms-app-container || true
            docker rm qms-app-container || true

            # Run the new application container
            docker run -d \
              --name qms-app-container \
              --restart unless-stopped \
              -p 8080:8080 \  # Adjust ports as needed
              $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          EOF
